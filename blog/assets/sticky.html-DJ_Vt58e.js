import{_ as n,o as s,c as a,e as t}from"./app-Bf5v9IqV.js";const p="/blog/assets/1709634833860-XRKZqp0Q.png",o="/blog/assets/1709634891472-D8XtIYJY.png",e="/blog/assets/1709635144981-DMdpqT3X.png",c={},i=t(`<h1 id="详解-tcp-的的三次握手和四次挥手-通过-wireshark" tabindex="-1"><a class="header-anchor" href="#详解-tcp-的的三次握手和四次挥手-通过-wireshark"><span>详解 TCP 的的三次握手和四次挥手-通过 Wireshark</span></a></h1><p>TCP（传输控制协议）是一种面向连接的协议，它在数据传输之前需要在客户端和服务器之间建立一个连接。这个连接建立的过程就是三次握手，而连接断开的过程就是四次挥手。下面我将通过 wireshark 详细解释这两个过程。</p><ol><li>通过，node 开启一个 http 服务（http 是基于 tcp 的），创建 index.mjs 文件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text/html&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Server running on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>选择本地的适配器</li></ol><p><img src="`+p+'" alt="1709634833860"></p><ol start="4"><li><p>添加过滤规则</p><p><img src="'+o+'" alt="1709634891472"></p></li><li><p>使用浏览器输入 <strong>http://localhost:3000</strong> 请求该服务</p></li><li><p>wireshark 中的情况如下</p><p><img src="'+e+'" alt="1709635144981"></p></li></ol><p>注意：第一次发送过去的 seq 都是由算法新生成的，后续一般是依次递增，ack 为前一个异端的 seq+1</p><p>总结：</p><p><strong>三次握手：</strong></p><ol><li><strong>第一次握手</strong>：客户端向服务器发送一个 SYN（同步）报文，并指明客户端的初始化序列号 ISN（Initial Sequence Number）。SYN 报文的主要作用是告诉服务器，客户端想要建立连接，并询问服务器是否同意。此时，客户端进入 SYN_SEND 状态，等待服务器的回复。</li><li><strong>第二次握手</strong>：服务器收到客户端的 SYN 报文后，如果同意建立连接，会发送一个 SYN-ACK 报文给客户端。这个报文包含了服务器的初始化序列号 ISN，以及对客户端序列号的确认（ACK）。此时，服务器进入 SYN_RECV 状态。SYN-ACK 报文的作用是告诉客户端，服务器已经收到了 SYN 报文，并同意建立连接。</li><li><strong>第三次握手</strong>：客户端收到服务器的 SYN-ACK 报文后，会发送一个 ACK 报文给服务器，确认已经收到了服务器的 SYN-ACK 报文。此时，客户端和服务器都进入了 ESTABLISHED 状态，表示连接已经成功建立，可以开始数据传输了。</li></ol><p><strong>四次挥手：</strong></p><ol><li><strong>第一次挥手</strong>：当数据传输完成后，客户端想要断开连接，会向服务器发送一个 FIN（结束）报文，告诉服务器它已经完成了数据的发送，希望断开连接。此时，客户端进入 FIN_WAIT_1 状态。</li><li><strong>第二次挥手</strong>：服务器收到客户端的 FIN 报文后，会发送一个 ACK 报文给客户端，确认已经收到了 FIN 报文。此时，客户端进入 FIN_WAIT_2 状态，等待服务器的处理。服务器则开始准备关闭连接，但仍然可以发送数据。</li><li><strong>第三次挥手</strong>：当服务器也完成了数据的发送，或者确定不再需要发送数据时，会向客户端发送一个 FIN 报文，告诉客户端它已经完成了数据的发送，希望断开连接。此时，服务器进入 LAST_ACK 状态。</li><li><strong>第四次挥手</strong>：客户端收到服务器的 FIN 报文后，会发送一个 ACK 报文给服务器，确认已经收到了 FIN 报文。此时，服务器进入 CLOSED 状态，表示连接已经完全关闭。客户端在发送完 ACK 报文后，也进入 CLOSED 状态，表示连接已经完全关闭。</li></ol><p>需要注意的是，在四次挥手过程中，虽然客户端和服务器都发送了 FIN 报文，但实际的连接断开是由服务器控制的。这是因为在大多数情况下，服务器需要处理多个客户端的连接，如果允许客户端随意断开连接，可能会导致服务器无法正确管理连接。因此，四次挥手的设计保证了连接的可靠断开。</p>',14),l=[i];function r(u,k){return s(),a("div",null,l)}const g=n(c,[["render",r],["__file","sticky.html.vue"]]),m=JSON.parse('{"path":"/posts/sticky.html","title":"详解 TCP 的的三次握手和四次挥手-通过 Wireshark","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","category":["CategoryC"],"tag":["tag E"],"sticky":true,"excerpt":"<p>A sticky article demo.</p>"},"headers":[],"git":{},"filePathRelative":"posts/sticky.md"}');export{g as comp,m as data};
